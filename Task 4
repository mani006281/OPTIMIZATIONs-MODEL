# CODTECH Internship Task-4: Optimization Model
**Objective**: Solve a business problem using optimization techniques like Linear Programming and Python libraries like PuLP.

# Problem Statement
A company manufactures two products: **Product A** and **Product B**. Each product requires a certain amount of labor hours and raw materials, both of which are limited. The goal is to determine how many units of each product to produce to **maximize profit**.

**Product Data:**

| Product       | Profit/Unit | Labor Hours/Unit | Raw Material/Unit |
|---------------|-------------|------------------|-------------------|
| A             | ₹40         | 2                | 3                 |
| B             | ₹30         | 1                | 2                 |
| **Available** | —           | 100 hours        | 120 units         |

**Objective Function:**

Maximize Profit = `40 * A + 30 * B`

**Constraints:**
- `2A + 1B <= 100` (Labor hours)
- `3A + 2B <= 120` (Raw materials)
- `A, B >= 0`

## Python Implementation using PuLP

# Import PuLP
from pulp import LpMaximize, LpProblem, LpVariable, value

# Define the Linear Programming problem
model = LpProblem("Product_Mix_Optimization", LpMaximize)

# Define the decision variables
A = LpVariable("Product_A", lowBound=0, cat='Continuous')
B = LpVariable("Product_B", lowBound=0, cat='Continuous')

# Objective function: Maximize profit
model += 40 * A + 30 * B, "Total_Profit"

# Constraints
model += 2 * A + 1 * B <= 100, "Labor_Hours"
model += 3 * A + 2 * B <= 120, "Raw_Materials"

# Solve the problem
model.solve()

# Output results
print(f"Status: {model.status}, {LpProblem.status[model.status]}")
print(f"Optimal number of Product A to produce: {A.varValue}")
print(f"Optimal number of Product B to produce: {B.varValue}")
print(f"Maximum Profit: ₹{value(model.objective)}")
